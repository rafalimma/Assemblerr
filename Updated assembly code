section .data
    prompt1 db "Digite o primeiro número: ", 0
    prompt2 db "Digite o segundo número: ", 0
    result db "O MMC dos números é: ", 0
    prompt3 db "Deseja calcular novamente? (S/n): ", 0
    newline db 10, 0

section .bss
    num1 resd 2
    num2 resd 2
    choice resb 1
    mmc resd 1

section .text
    global _start

_start:
    ; Loop principal
    loop_start:
        ; Solicitar o primeiro número
        mov eax, 4
        mov ebx, 1
        mov ecx, prompt1
        mov edx, 27
        int 0x80

        ; Ler o primeiro número
        mov eax, 3
        mov ebx, 0
        mov ecx, num1
        mov edx, 2
        int 0x80

    mov eax, num1
    call atoi
    ;call    iprint
    mov [num1], eax


        ; Solicitar o segundo número
        mov eax, 4
        mov ebx, 1
        mov ecx, prompt2
        mov edx, 27
        int 0x80

        ; Ler o segundo número
        mov eax, 3
        mov ebx, 0
        mov ecx, num2
        mov edx, 2
        int 0x80
    
    mov eax, num2
    call atoi
    ;call    iprint
    mov [num2], eax
    
    
        ; Calcular o MMC
        mov eax, [num1]
        mov ebx, [num2]
        call calculate_mmc

        ; Salvar o resultado em mmc
        mov [mmc], eax

        ; Exibir a frase "O MMC dos números é"
        mov eax, 4
        mov ebx, 1
        mov ecx, result
        mov edx, 23
        int 0x80
        
        ; Exibir o resultado do MMC
        mov eax, [mmc]
        call iprint
        call print_newline   ; Imprima uma nova linha para melhor formatação

        mov eax, 4
        mov ebx, 1
        mov ecx, [mmc]
        add ecx, 3
        mov edx, 4
        int 0x80

        ; Pular uma linha
        mov eax, 4
        mov ebx, 1
        mov ecx, newline
        mov edx, 2
        int 0x80

        ; Perguntar se deseja calcular novamente
        mov eax, 4
        mov ebx, 1
        mov ecx, prompt3
        mov edx, 31
        int 0x80

        ; Ler a escolha
        mov eax, 3
        mov ebx, 0
        mov ecx, choice
        mov edx, 8
        int 0x80

        ; Verificar se a escolha é 'S' ou 's'
        cmp byte [choice], 'S'
        je loop_start
        cmp byte [choice], 's'
        je loop_start

    ; Sair do programa
    exit_program:
        mov eax, 1
        xor ebx, ebx
        int 0x80

calculate_mmc:
    ; Função para calcular o MMC (Mínimo Múltiplo Comum)
    ; Entradas: eax = a, ebx = b
    ; Saída: eax = MMC(a, b)
    push ebp
    mov ebp, esp
    mov ecx, eax
    mov edx, ebx

    ; Usar um loop para encontrar o MMC
    mmc_loop:
        cmp ecx, edx
        je mmc_done
        jl mmc_increment_ecx
        jmp mmc_increment_edx

    mmc_increment_ecx:
        add ecx, eax
        jmp mmc_loop

    mmc_increment_edx:
        add edx, ebx
        jmp mmc_loop

    mmc_done:
        mov eax, ecx  ; O MMC está em ecx
        pop ebp
        ret
        
;------------------------------------------
; int atoi(Integer number)
; Ascii to integer function (atoi)
atoi:
    push    ebx             ; preserve ebx on the stack to be restored after function runs
    push    ecx             ; preserve ecx on the stack to be restored after function runs
    push    edx             ; preserve edx on the stack to be restored after function runs
    push    esi             ; preserve esi on the stack to be restored after function runs
    mov     esi, eax        ; move pointer in eax into esi (our number to convert)
    mov     eax, 0          ; initialise eax with decimal value 0
    mov     ecx, 0          ; initialise ecx with decimal value 0
 
.multiplyLoop:
    xor     ebx, ebx        ; resets both lower and uppper bytes of ebx to be 0
    mov     bl, [esi+ecx]   ; move a single byte into ebx register's lower half
    cmp     bl, 48          ; compare ebx register's lower half value against ascii value 48 (char value 0)
    jl      .finished       ; jump if less than to label finished
    cmp     bl, 57          ; compare ebx register's lower half value against ascii value 57 (char value 9)
    jg      .finished       ; jump if greater than to label finished
 
    sub     bl, 48          ; convert ebx register's lower half to decimal representation of ascii value
    add     eax, ebx        ; add ebx to our interger value in eax
    mov     ebx, 10         ; move decimal value 10 into ebx
    mul     ebx             ; multiply eax by ebx to get place value
    inc     ecx             ; increment ecx (our counter register)
    jmp     .multiplyLoop   ; continue multiply loop
 
.finished:
    cmp     ecx, 0          ; compare ecx register's value against decimal 0 (our counter register)
    je      .restore        ; jump if equal to 0 (no integer arguments were passed to atoi)
    mov     ebx, 10         ; move decimal value 10 into ebx
    div     ebx             ; divide eax by value in ebx (in this case 10)
 
.restore:
    pop     esi             ; restore esi from the value we pushed onto the stack at the start
    pop     edx             ; restore edx from the value we pushed onto the stack at the start
    pop     ecx             ; restore ecx from the value we pushed onto the stack at the start
    pop     ebx             ; restore ebx from the value we pushed onto the stack at the start
    ret
;------------------------------------------
; int slen(String message)
; String length calculation function
slen:
    push    ebx
    mov     ebx, eax
 
nextchar:
    cmp     byte [eax], 0
    jz      finished
    inc     eax
    jmp     nextchar
 
finished:
    sub     eax, ebx
    pop     ebx
    ret

print_newline:
    mov eax, 4
    mov ebx, 1
    mov ecx, newline
    mov edx, 1
    int 0x80
    ret

;------------------------------------------
; void iprint(Integer number)
; Integer printing function (itoa)
iprint:
    push    eax             ; preserve eax on the stack to be restored after function runs
    push    ecx             ; preserve ecx on the stack to be restored after function runs
    push    edx             ; preserve edx on the stack to be restored after function runs
    push    esi             ; preserve esi on the stack to be restored after function runs
    mov     ecx, 0          ; counter of how many bytes we need to print in the end
 
divideLoop:
    inc     ecx             ; count each byte to print - number of characters
    mov     edx, 0          ; empty edx
    mov     esi, 10         ; mov 10 into esi
    idiv    esi             ; divide eax by esi
    add     edx, 48         ; convert edx to it's ascii representation - edx holds the remainder after a divide instruction
    push    edx             ; push edx (string representation of an intger) onto the stack
    cmp     eax, 0          ; can the integer be divided anymore?
    jnz     divideLoop      ; jump if not zero to the label divideLoop
 
printLoop:
    dec     ecx             ; count down each byte that we put on the stack
    mov     eax, esp        ; mov the stack pointer into eax for printing
    call    sprint          ; call our string print function
    pop     eax             ; remove last character from the stack to move esp forward
    cmp     ecx, 0          ; have we printed all bytes we pushed onto the stack?
    jnz     printLoop       ; jump is not zero to the label printLoop
 
    pop     esi             ; restore esi from the value we pushed onto the stack at the start
    pop     edx             ; restore edx from the value we pushed onto the stack at the start
    pop     ecx             ; restore ecx from the value we pushed onto the stack at the start
    pop     eax             ; restore eax from the value we pushed onto the stack at the start
    ret
    
;------------------------------------------
; void sprint(String message)
; String printing function
sprint:
    push    edx
    push    ecx
    push    ebx
    push    eax
    call    slen
 
    mov     edx, eax
    pop     eax
 
    mov     ecx, eax
    mov     ebx, 1
    mov     eax, 4
    int     80h
 
    pop     ebx
    pop     ecx
    pop     edx
    ret

;------------------------------------------
; void exit()
; Exit program and restore resources
quit:
    mov     ebx, 0
    mov     eax, 1
    int     80h
    ret
